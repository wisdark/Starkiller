on:
  release:
    types: [published]

name: Upload Release Asset

jobs:
  mac:
    name: Upload Release Asset Mac
    if: github.event_name == 'release' && !contains(github.ref, 'kali')
    runs-on: macos-latest
    steps:
      - name: Trim release name
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -c 2-)  
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - name: Build project
        run: |
          yarn
          yarn electron:build:mac --p never
      - name: Upload Release Asset Mac
        id: upload-release-asset-mac
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          # Note: the release name must match the version number in package.json.
          asset_path: ./dist_electron/starkiller-${{ steps.get_version.outputs.VERSION }}.dmg
          asset_name: starkiller-${{ steps.get_version.outputs.VERSION }}.dmg
          asset_content_type: application/octet-stream
  linux:
    name: Upload Release Asset Linux
    if: github.event_name == 'release' && !contains(github.ref, 'kali')
    runs-on: ubuntu-latest
    steps:
      - name: Trim release name
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -c 2-)  
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - name: Build project
        run: |
          yarn
          yarn electron:build:lin --p never
      - name: Upload Release Asset Linux
        id: upload-release-asset-linux 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          # Note: the release name must match the version number in package.json.
          asset_path: ./dist_electron/starkiller-${{ steps.get_version.outputs.VERSION }}.AppImage
          asset_name: starkiller-${{ steps.get_version.outputs.VERSION }}.AppImage
          asset_content_type: application/octet-stream
  windows:
    name: Upload Release Asset Windows
    if: github.event_name == 'release' && !contains(github.ref, 'kali')
    runs-on: windows-latest
    steps:
      - name: Trim release name
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -c 2-)  
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - name: Build project
        run: |
          yarn
          yarn electron:build:win --p never
      - name: Upload Release Asset Windows
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          # Note: the release name must match the version number in package.json.
          asset_path: ./dist_electron/starkiller Setup ${{ steps.get_version.outputs.VERSION }}.exe
          asset_name: starkiller Setup ${{ steps.get_version.outputs.VERSION }}.exe
          asset_content_type: application/octet-stream

# useful: https://developer.github.com/v3/repos/releases/#get-a-single-release
